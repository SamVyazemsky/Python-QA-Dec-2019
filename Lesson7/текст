Что происходит когда мы итерируемся используя for:
Вызывается метод iter() для получения итератора для “a”
Вызывается метод next() для получения каждого элемента из итератора по очереди
Выход из цикла, когда метод next() выбрасывает исключение StopIteration


Iterable – Объект, способный возвращать элементы по одному
у него есть __iter__() (iterator protocol) или __getitem__() (sequence protocol)
вызов iter() превращает в итератор
for вызывает iter() неявно, сохраняет итератор в безымянной переменной
Iteration – итерирование, цикличный процесс извлечения данных, объектов из коллекции (объекта итерации)
Iterator – Объект, представляющий последовательность данных
Содержит __iter__(), который возвращает себя же
Iterator так же iterable
Завершается после raise StopIteration


Generator
Функция, которая возвращает итератор:
В ней есть yield
После использования выкидывает StopIteration (т.е. использовать можно один раз)
Может использовать next()
Хранит промежуточные состояния между вызовами yield


Yield
Если yield внутри функции, то она вернет генератор
Функция будет вызвана при начале итерирования
Yield возвращает результат как элеменет генератора
Yield останавливает функцию до следующей итерации (вызова метода next())
Функция продолжает работы с предыдущего yield (с предшествующего состояния)


Lambda
Лябмда-выражения — это особый синтаксис в Python, необходимый для создания анонимных функций. Я назову синтаксис лямбда как лямбда-выражение, а получаемую функцию — лямбда-функцию.

Лямбда-выражения в Python позволяют функции быть созданной и переданной (зачастую другой функции) в одной строчке кода.



Map

Принимает функцию и набор данных. Создаёт новую коллекцию, выполняет функцию на каждой позиции данных и добавляет возвращаемое значение в новую коллекцию. Возвращает новую коллекцию.

Простой map, принимающий список имён и возвращающий список длин:


Этот map возводит в квадрат каждый элемент:

squares = map(lambda x: x * x, [0, 1, 2, 3, 4])

print squares
# => [0, 1, 4, 9, 16]

Он не принимает именованную функцию, а берёт анонимную, определённую через lambda. Параметры lambda определены слева от двоеточия. Тело функции – справа. Результат возвращается неявным образом.


Не функциональный код


names = ['Маша', 'Петя', 'Вася']

for i in range(len(names)):
    names[i] = hash(names[i])

print names


Функциональный код:
names = ['Маша', 'Петя', 'Вася']

secret_names = map(hash, names)


Reduce
Reduce принимает функцию и набор пунктов. Возвращает значение, получаемое комбинированием всех пунктов.

Пример простого reduce. Возвращает сумму всех пунктов в наборе:


x – текущий пункт, а – аккумулятор. Это значение, которое возвращает выполнение lambda на предыдущем пункте. reduce() перебирает все значения, и запускает для каждого lambda на текущих значениях а и х, и возвращает результат в а для следующей итерации.

А чему равно а в первой итерации? Оно равно первому элементу коллекции, и reduce() начинает работать со второго элемента. То есть, первый х будет равен второму предмету набора.

Не функционально:
sentences = ['капитан джек воробей',
             'капитан дальнего плавания',
             'ваша лодка готова, капитан']

cap_count = 0
for sentence in sentences:
    cap_count += sentence.count('капитан')

print cap_count
# => 3


Функционально:
sentences = ['капитан джек воробей',
             'капитан дальнего плавания',
             'ваша лодка готова, капитан']

cap_count = reduce(lambda a, x: a + x.count('капитан'),
                   sentences,
                   0)